1、关系映射
	1、一对一(1:1)
		entry = models.OneToOneField(Entry)

		class Wife(models.Model):
			... ...
			author = models.OneToOneField(Author)
	2、一对多(1:M)
		1、什么是一对多
			A表中的一条数据可以与B表中的多条数据关联
			B表中的一条数据只能与A表中的一条数据关联

			如：
				出版社(Publisher) 和 图书(Book)
				商品类型(GoodsType) 和 商品(Goods)
		2、在数据库中的体现
			通过外键(Foreign Key)来体现一对多
			在"多"表中增加外键(Foreign Key)对"一"表的主键进行引用
		3、语法
			使用 外键(Foreign Key)
			在"多"的实体中，增加：
				属性=models.ForeignKey(Entry)
			ex:
				Book(多) 和 Publisher(一)

				class Book(models.Model):
					... ...
					publisher = models.ForeignKey(Publisher)

		4、查询
			Book(多) 和 Publisher(一)

			class Book(models.Model):
				... ...
				publisher=models.ForeignKey(Publisher)

			1、正向查询 - 通过Book查询Publisher	
				#查询id为1的书籍的信息
					book = Book.objects.get(id=1)
				#查询关联的publisher
					publisher = book.publisher
			2、反向查询 - 通过Publisher查询Book

				Django会在 1 的实体中增加 关联对象_set 属性
				用于查询 多 的数据

				结合 Publisher 和 Book 之间关系 ：
					在 Publisher 中 增加了一个 book_set 属性

				ex:
					publisher=Publisher.objects.get(id=1)
					books = publisher.book_set.all()
	3、多对多(M:N)
		1、什么是多对多
			A表中的一条记录可以与B表中的任意多条记录匹配
			B表中的一条记录可以与A表中的任意多条记录匹配
			ex：
				作者 与 书籍
		2、在数据库中的体现
			必须创建第三张表，关联涉及到的两张表数据
		3、语法
			允许在任何一个实体中增加操作：
				entry = models.ManyToManyField(Entry)
			ex:
				class Author(models.Model):
					... ...
					book = models.ManyToManyField(Book)
		4、查询
			class Author(models.Model):
				... ...
				book = models.ManyToManyField(Book)
			
			1、正向查询-通过Author查询所有的Book
				author = Author.objects.get(id=1)
				books = author.book.all()
				通过 关联属性.all() 查询所有对应数据

			2、反向查询-通过Book查询所有的Author
				Django中 会在Book 实体中增加一个隐式属性 author_set

				book = Book.objects.get(id=1)
				authors = book.author_set.all()
			
			练习：
				创建 Author 与 Publisher 的多对多的关系
				并插入关联数据
				1、查询 韩寒 所签约的所有出版社
				2、查询 北京大学出版社 下所有的作者
2、自定义查询对象 - objects
	1、声明类EntryManager，继承自models.Manager
		在 EntryManager 中添加自定义函数

		class EntryManager(models.Manager):
			def 函数名(self,自定义参数列表)：
				... ...
				return ... ...
	2、使用 EntryManager 覆盖 models 类中的objects
		class Entry(models.Model):
			objects = EntryManager()
	
	练习：
		1、为 Author 指定自定义 objects 对象
			1、查询年纪小于指定年纪的作者的信息
		2、为 Book 指定自定义 objects 对象
			1、查询书名中包含指定关键字的书籍的信息
3、HttpRequest
	1、HTTP 协议
		1、请求(request)
			1、请求起始行
			2、请求消息头
			3、请求主体
		2、响应(response)
			1、响应起始行
				协议名称/版本号 响应状态码 原因短句
			2、响应消息头
			3、响应主体
	2、HttpRequest介绍
		1、什么是HttpRequest
			HttpRequest，在Django中是对请求对象的封装体现。它封装了请求过程中所有的信息。在Django中，HttpRequest被化身成了request封装到视图处理函数中作为参数，在调用视图时自动传入

		2、HttpRequest中的主要内容
			1、request.scheme : 请求协议
			2、request.body : 请求主体
			3、request.path : 请求路径
			4、request.get_host() : 请求主机/域名
			5、request.method : 请求方法
			6、request.GET : get请求方式提交的数据
			7、request.POST : post请求方式提交的数据
			8、request.COOKIES : cookies中的数据

		作业：
			完成之前的Author实体的修改操作
			能够把数据再更新回数据库



['COOKIES', 'FILES', 'GET', 'META', 'POST', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_encoding', '_get_post', '_get_raw_host', '_get_scheme', '_initialize_handlers', '_load_post_and_files', '_mark_post_parse_error', '_messages', '_post_parse_error', '_read_started', '_set_post', '_stream', '_upload_handlers', 'body', 'build_absolute_uri', 'close', 'content_params', 'content_type', 'csrf_processing_done', 'encoding', 'environ', 'get_full_path', 'get_host', 'get_port', 'get_raw_uri', 'get_signed_cookie', 'is_ajax', 'is_secure', 'method', 'parse_file_upload', 'path', 'path_info', 'read', 'readline', 'readlines', 'resolver_match', 'scheme', 'session', 'upload_handlers', 'user', 'xreadlines']








